package zsh

import (
	"bytes"
	_ "embed"
	"strings"
	"text/template"

	"github.com/alex-held/devctl-kit/pkg/system"
)

//go:embed "templates/completions.tmpl"
var completionsTemplateString string

//go:embed "testdata/completions_test"
var completionsExpectedString string

var fileHeaderTemplateString = "{{ define \"fileheader\" }}#!/usr/bin/env zsh\n#\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# DO NOT MODIFY - AUTOGENERATED by github.com/alex-held/devctl\n# CONFIGURE USING {{ .CONFIGFILE }}\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n{{ end }}"

type FileHeaderTmplData struct {
	CONFIGFILE string
}

type CompletionsTmplData struct {
	FileHeader      FileHeaderTmplData
	Header          string
	CONFIGFILE      string
	COMPLETIONS_DIR string
	Completions     CompletionsSpec
}

var commonTemplates = map[string]*template.Template{}
var tmpls = map[string]string{
	"fileheader":  fileHeaderTemplateString,
	"completions": completionsTemplateString,
}

var templates = template.New("")

func init() {

	templates, _ = templates.New("fileheader").Parse(fileHeaderTemplateString)
	templates, _ = templates.New("completions").Parse(completionsTemplateString)

}

func (t CompletionsTmplData) Render() (s string, err error) {
	b := &bytes.Buffer{}

	if err := templates.ExecuteTemplate(b, "completions", &t); err != nil {
		return "", err
	}

	s = b.String()
	if system.IsDarwin() {
		s = strings.ReplaceAll(s, "\r\n", "\n")
	}

	return s, nil
}
